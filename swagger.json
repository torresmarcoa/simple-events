{
  "swagger": "2.0",
  "info": {
    "title": "Simple Events",
    "description": "API to manage events",
    "version": "1.0.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Welcome Message"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api-docs": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/users/": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new user",
        "description": "Creates a new user with the provided information.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User data to create",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "fname": {
                  "type": "string",
                  "example": "Marco"
                },
                "lname": {
                  "type": "string",
                  "example": "Torres"
                },
                "email": {
                  "type": "string",
                  "example": "marco@example.com"
                },
                "phone": {
                  "type": "string",
                  "example": "5551234567"
                },
                "role": {
                  "type": "string",
                  "example": "attendee"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Invalid user data"
          },
          "409": {
            "description": "User already exists"
          },
          "500": {
            "description": "Server error while creating user"
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all users",
        "description": "Retrieves a list of all users stored in the database.",
        "responses": {
          "200": {
            "description": "List of users retrieved successfully"
          },
          "500": {
            "description": "Server error while retrieving users"
          }
        }
      }
    },
    "/users/{id}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update a user",
        "description": "Updates a user\\'s data based on their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated user information",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "fname": {
                  "type": "string",
                  "example": "Marco"
                },
                "lname": {
                  "type": "string",
                  "example": "Torres Aceves"
                },
                "email": {
                  "type": "string",
                  "example": "marco.updated@example.com"
                },
                "phone": {
                  "type": "string",
                  "example": "5557654321"
                },
                "role": {
                  "type": "string",
                  "example": "organizer"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User updated successfully (no content returned)"
          },
          "400": {
            "description": "Invalid update data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error while updating user"
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a user by ID",
        "description": "Retrieves a user using their MongoDB ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error while retrieving user"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a user",
        "description": "Deletes a specific user by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error while deleting user"
          }
        }
      }
    },
    "/users/role/{roleName}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get users by role",
        "description": "Retrieves a list of users that match the specified role.",
        "parameters": [
          {
            "name": "roleName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User role"
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved by role"
          },
          "400": {
            "description": "Missing role parameter"
          },
          "500": {
            "description": "Server error while retrieving users by role"
          }
        }
      }
    },
    "/events/": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Create a new event",
        "description": "Creates a new event with the provided data.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "New event data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Music Festival"
                },
                "dateTime": {
                  "type": "string",
                  "example": "2025-07-01T20:00:00Z"
                },
                "address": {
                  "type": "string",
                  "example": "123 Main St, Cityville"
                },
                "organizer": {
                  "type": "string",
                  "example": "EventCo"
                },
                "capacity": {
                  "type": "number",
                  "example": 500
                },
                "assistantsNumber": {
                  "type": "number",
                  "example": 150
                },
                "performers": {
                  "type": "string",
                  "example": "Band A"
                },
                "eventType": {
                  "type": "string",
                  "example": "concert"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Event created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error while creating event"
          }
        }
      },
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get all events",
        "description": "Retrieves a list of all events stored in the database.",
        "responses": {
          "200": {
            "description": "List of events retrieved successfully"
          },
          "500": {
            "description": "Server error while retrieving events"
          }
        }
      }
    },
    "/events/{id}": {
      "put": {
        "tags": [
          "Events"
        ],
        "summary": "Update an existing event",
        "description": "Updates an event based on its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the event to update"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated event data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Updated Event Name"
                },
                "dateTime": {
                  "type": "string",
                  "example": "2025-08-15T18:30:00Z"
                },
                "address": {
                  "type": "string",
                  "example": "456 Updated Ave"
                },
                "organizer": {
                  "type": "string",
                  "example": "Updated Organizer"
                },
                "capacity": {
                  "type": "number",
                  "example": 300
                },
                "assistantsNumber": {
                  "type": "number",
                  "example": 200
                },
                "performers": {
                  "type": "string",
                  "example": "Performer X"
                },
                "eventType": {
                  "type": "string",
                  "example": "meetup"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Event not found"
          },
          "500": {
            "description": "Server error while updating event"
          }
        }
      },
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get an event by ID",
        "description": "Retrieves the details of a specific event by its MongoDB ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "MongoDB ObjectId of the event"
          }
        ],
        "responses": {
          "200": {
            "description": "Event retrieved successfully"
          },
          "404": {
            "description": "Event not found"
          },
          "500": {
            "description": "Server error while retrieving the event"
          }
        }
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "Delete an event",
        "description": "Deletes a specific event by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the event to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Event deleted successfully"
          },
          "400": {
            "description": "Invalid ID format"
          },
          "404": {
            "description": "Event not found"
          },
          "500": {
            "description": "Server error while deleting event"
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/auth/google/callback": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/tickets/": {
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Create a new ticket",
        "description": "Creates a new ticket for an event.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "event": {
                  "type": "string",
                  "example": "60f1a0f1f1a0f1a0f1a0f1a0"
                },
                "buyer": {
                  "type": "string",
                  "example": "68446494699c448035392728"
                },
                "purchaseDate": {
                  "type": "string",
                  "example": "2025-06-10T18:00:00Z"
                },
                "seatNumber": {
                  "type": "number",
                  "example": 12
                },
                "status": {
                  "type": "string",
                  "example": "active"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Ticket created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error while creating ticket"
          }
        }
      },
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Get all tickets",
        "description": "Retrieves all tickets stored in the database.",
        "responses": {
          "200": {
            "description": "List of tickets retrieved successfully"
          },
          "500": {
            "description": "Server error while retrieving tickets"
          }
        }
      }
    },
    "/tickets/{id}": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Get ticket by ID",
        "description": "Retrieves a ticket by its MongoDB ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the ticket"
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket retrieved successfully"
          },
          "404": {
            "description": "Ticket not found"
          },
          "500": {
            "description": "Server error while retrieving ticket"
          }
        }
      },
      "put": {
        "tags": [
          "Tickets"
        ],
        "summary": "Update a ticket",
        "description": "Updates the details of an existing ticket by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the ticket"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "buyer": {
                  "type": "string",
                  "example": "Jane Smith"
                },
                "seatNumber": {
                  "type": "string",
                  "example": "B5"
                },
                "status": {
                  "type": "string",
                  "example": "cancelled"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ticket updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Ticket not found"
          },
          "500": {
            "description": "Server error while updating ticket"
          }
        }
      },
      "delete": {
        "tags": [
          "Tickets"
        ],
        "summary": "Delete a ticket",
        "description": "Deletes a ticket by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the ticket to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Ticket not found"
          },
          "500": {
            "description": "Server error while deleting ticket"
          }
        }
      }
    },
    "/comments/": {
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Create a new comment",
        "description": "Creates a new comment linked to an event and author.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "event": {
                  "type": "string",
                  "example": "60f1a0f1f1a0f1a0f1a0f1a0"
                },
                "author": {
                  "type": "string",
                  "example": "60f1a0f1f1a0f1a0f1a0f1a1"
                },
                "content": {
                  "type": "string",
                  "example": "This is an awesome event!"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Comment created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get all comments",
        "description": "Retrieves all comments from the database.",
        "responses": {
          "200": {
            "description": "Comments retrieved successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get a comment by ID",
        "description": "Retrieves a comment using its MongoDB ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment retrieved successfully"
          },
          "404": {
            "description": "Comment not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "Comments"
        ],
        "summary": "Update a comment",
        "description": "Updates the content of an existing comment by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the comment"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "Updated comment content"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Comment not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Comments"
        ],
        "summary": "Delete a comment",
        "description": "Deletes a comment by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the comment to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Comment not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  }
}